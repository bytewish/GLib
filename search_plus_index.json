{"./":{"url":"./","title":"Introduction","keywords":"","body":""},"article_list/widget/":{"url":"article_list/widget/","title":"widget","keywords":"","body":"Special effects treeView DefalutSpinner Easy Use RefreshMoreRecyclerview It's a recyclerview support refresh and load more. "},"article_list/widget/default_spinner.html":{"url":"article_list/widget/default_spinner.html","title":"default spinner","keywords":"","body":"introduce This is a spinner widget which support default value before user select, it's similar to the html select how to use layout file bind data and add listener mBinding.spinnerVoucherTeplate.setAdapter(ArrayAdapter(this@CreateVoucherActivity,R.layout.spinner_list_item,dataList.map { it.name })) mBinding.spinnerVoucherTeplate.onItemClickListener = AdapterView.OnItemClickListener{ adapter, v, pos, id -> // Do the select things } if you want change the popupview width, you can use mBinding.spinnerVoucherTeplate.let{ it.dropDownWidth = PhoneUtils.getScreenWidthInPx(this@CreateVoucherActivity) it.setDropDownBackgroundResource(R.drawable.shape_corner_5_line_white_gray) } "},"article_list/widget/refresh-more-recyclerview.html":{"url":"article_list/widget/refresh-more-recyclerview.html","title":"refresh more recyclerview","keywords":"","body":"introduce This is a composite widget that includes recyclerview and SmartRefreshLayout, making it convenient to use when you need to refresh and load more items in a Recyclerview. how to use Declare component Component initialization // It is better to call the init funcition in onViewCreated ovverride fun onViewCreated(view:View,saveInstanceState:Bundle?){ // ... initRefreshAndMoreRecyclerview() } fun initRefreshAndMoreRecyclerview(){ // if you like the divider you should use that val decoration = DividerItemDecoration(mActivity, LinearLayoutManager.VERTICAL).also { it.setDrawable( ResourcesCompat.getDrawable( resources, R.drawable.list_divider_10, null )!! ) } mDataBinding.refreshMoreRecyclerview .addItemDecoration(decoration) .bindListener({ // Callback triggered on refresh onRefresh() },{ // Callback triggered on load more cPage++ mViewModel.getVoucherList(voucherType,cPage) }) .bindAdapter(genVoucherAdapter) } Stop load animation mDataBinding.refreshMoreRecyclerview.finishLoad() "},"article_list/widget/treeview.html":{"url":"article_list/widget/treeview.html","title":"treeview","keywords":"","body":"introduce This is an Android tree hierarchy selection widget. The widget's code is derived from github Link. Based on this library, additional partial selection functionality and remove the unable select state. how to use Data Conversion data class ProductCategoryModel( override val nodeViewId: String, val name: String, val child: List, ) : NodeData { override fun getNodeChild(): List { return child } companion object { private fun convertToCategoryModelList(productSubList: MutableList?): MutableList { if (productSubList == null || productSubList.isEmpty()) return mutableListOf() return productSubList.map { productSub -> ProductCategoryModel( nodeViewId = productSub.id.toString(), name = productSub.name ?: \"Unnamed\", child = convertToCategoryModelList(productSub.sub) ) }.toMutableList() } fun getList(dataList: MutableList) = convertToCategoryModelList(dataList) } override fun areItemsTheSame(item: NodeData): Boolean { return if (item !is ProductCategoryModel) false else nodeViewId == item.nodeViewId } override fun areContentsTheSame(item: NodeData): Boolean { return if (item !is ProductCategoryModel) false else item.name == name && item.child.size == child.size } override fun getChangePayload(item: NodeData): Bundle { return Bundle() } } Custom your item layoutï¼šWe use indeterminateCheckbox to support three state checkbox, all select/ no select/part select. if you want have tree state, just use it with maven dependency Initialize Selector class MutiSelectCategoryActivity : BaseAppViewBindingActivity(), GapoTreeView.Listener{ private lateinit var treeView: GapoTreeView private var isShowLoading = false override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) showLoading() mViewModel.getCategoryAl() initListener() } private fun initListener(){ mBinding.tvSave.setOnClickListener { var selectIds = treeView.getSelectedNodes() var resultList = mutableListOf() var resultIntent = Intent() if(selectIds.size > 0){ selectIds.forEach { if(it.child.size ){ treeView = GapoTreeView.Builder.plant(this) .withRecyclerView(mBinding.treeView) .withLayoutRes(R.layout.view_multi_node_view) .setListener(this) .setData(ProductCategoryModel.getList(dataList).toMutableList()) .build() (intent.getSerializableExtra(CommonCode.pageParam) as? ArrayList)?.forEach { treeView.selectNode(it,true) } } override fun onBind(holder: View, position: Int, item: NodeViewData, bundle: Bundle?) { val ivArrow = holder.findViewById(R.id.iv_arrow) val cbCheck = holder.findViewById(R.id.rb_check) val tvNode = holder.findViewById(R.id.tv_department_name) val data = item.getData() tvNode.text = data.name if (item.isLeaf) { ivArrow.visibility = View.INVISIBLE } else { ivArrow.visibility = View.VISIBLE } val rotateDegree = if (item.isExpanded) 90f else 0f ivArrow.rotation = rotateDegree // cbCheck.isChecked = item.isSelected if(item.isLeaf){ cbCheck.isIndeterminate = false cbCheck.state = item.isSelected }else{ when(treeView.checkNodeChildState(item.nodeId)){ -1 -> { cbCheck.isIndeterminate = false item.isSelected = false cbCheck.state = false } 0 -> { cbCheck.isIndeterminate = true cbCheck.state = null } 1 -> { cbCheck.isIndeterminate = false item.isSelected = true cbCheck.state = true } } } //select node cbCheck.setOnClickListener { treeView.selectNode(item.nodeId, !item.isSelected) // will trigger onNodeSelected } //toggle node holder.setOnClickListener { if (item.isExpanded) { treeView.collapseNode(item.nodeId) } else { treeView.expandNode(item.nodeId) } } if((isShowLoading == false) && (position > 6)){ isShowLoading = true dismissLoading() } } override fun onNodeSelected(node: NodeViewData, child: List>, isSelected: Boolean) { //set selected for parent node and its child treeView.setSelectedNode(arrayListOf(node).apply { addAll(child) }, isSelected) //disable all child treeView.setNodesState( child.map { it.nodeId }, if (isSelected) NodeStateDisabled else null ) //update layout treeView.requestUpdateTree() } companion object { object NodeStateDisabled : NodeState() } override fun createObserver() { mViewModel.categoryList.observe(this){ startBindData(it) } } override fun getToolbar() = mBinding.toolbar } Need notice When the data is too large, data conversion can take a long time. Therefore, it is best to display a progress bar during the conversion process when handling large datasets. "},"article_list/common/":{"url":"article_list/common/","title":"common","keywords":"","body":"Common Here are some common data structure declarations definitions callback They may be used in an adapter or dialog. func desc CallBack empty call BooleanCallback empty a boolean value IntCallback empty a int value ext This is the place to store extension functions ViewExt This is an extension for View,includes func desc setSafeOnClickListener prevent double click ActivityExt This is an extension for Activity,inludes func desc setFullScreen set full screen page listener func desc SafeClickListener prevent double click utils Common utility classes. App Opener This is a utility class for launching third-party apps. including open tiktok func desc openTikTokUserProfile open ticktok profile openPlayStore open google play store Text Utils This is a utility class for helping deal text func desc isAllDigits Determine whether a character consists entirely of digits. Device Utils This is a utility class for getting device and system info func desc getScreenWidthInPx Get the screen width in pixels. getScreenWidthInDp Get the screen width in dp unitPxToDp Convert px to dp Share Utils This is a utility class for share to others app func desc shareText share text to other app "},"article_list/use_case/":{"url":"article_list/use_case/","title":"use case","keywords":"","body":"introduce This is a use case of a commonly used effect. Bottom Navigation page effect code XML Layout file menu file(home_navigation.xml) control the BottomView with your code mBinding.bottomView.itemIconTintList = null mBinding.bottomView.setOnItemSelectedListener { currentMenu = it when (it.itemId) { R.id.navigation_home -> { mBinding.viewPager.currentItem = 0 return@setOnItemSelectedListener true } R.id.navigation_order -> { mBinding.viewPager.currentItem = 1 return@setOnItemSelectedListener true } R.id.navigation_product -> { mBinding.viewPager.currentItem = 2 return@setOnItemSelectedListener true } R.id.navigation_message -> { mBinding.viewPager.currentItem = 3 return@setOnItemSelectedListener true } R.id.navigation_account -> { mBinding.viewPager.currentItem = 4 return@setOnItemSelectedListener true } } false } If you want show the red circle above of menu, you can use the BadgeView in control code. val menuView: BottomNavigationMenuView = mBinding.bottomView.getChildAt(0) as BottomNavigationMenuView val badgeMenuItemView: BottomNavigationItemView = menuView.getChildAt(3) as BottomNavigationItemView // remove all red circle removeMenuChild(badgeMenuItemView) // check whether badgeView exsist if (badgeView == null) { badgeView = LayoutInflater.from(this).inflate(R.layout.menu_notice_badge, menuView, false) badgeMenuItemView.addView(badgeView) } // set badgeView text val tvNotic: TextView = badgeView!!.findViewById(R.id.tv_badge) if (noticeCount 99) { tvNotic.visibility = View.VISIBLE tvNotic.text = \"99+\" } else { tvNotic.visibility = View.VISIBLE tvNotic.text = noticeCount.toString() } "},"article_list/strategy/":{"url":"article_list/strategy/","title":"strategy","keywords":"","body":"Naming strategy Drawable In the drawable folder, there are usually two types of data. shape and svg. shape we can follow the naming strategy below, which is divided into two parts, separated by two _ã€‚ The first part consists of shape_[fill color]_[corner size] and the second part presents the border, including [stroke color]_[stroke size]. shape: rr: rounded_rectangle r: rectangle o: oval l: line r: ring fill color: red/gray(semantic color value) corner size: lrt30:left right top coner size will be 30 rpx 30: left right top bottom coner size will be 30rpx stoke color: same to fill color stroke size same to corner size rr_red_140.xml means there is an rounded rectangle here which has red color and 140dp corner. svg it recommended semantic description. such as svg_box.xml "}}